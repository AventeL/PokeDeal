// Mocks generated by Mockito 5.4.5 from annotations
// in pokedeal/test/mocks/generated_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i17;

import 'package:bloc/bloc.dart' as _i18;
import 'package:mockito/mockito.dart' as _i1;
import 'package:pokedeal/features/authentication/data/authentication_data_source_interface.dart'
    as _i10;
import 'package:pokedeal/features/authentication/domain/models/user_profile.dart'
    as _i11;

import 'dart:async' as _i19;

import 'package:bloc/bloc.dart' as _i20;
import 'package:mockito/mockito.dart' as _i1;
import 'package:pokedeal/features/authentication/data/authentication_data_source_interface.dart'
    as _i11;
import 'package:pokedeal/features/authentication/domain/models/user_profile.dart'
    as _i12;
import 'package:pokedeal/features/authentication/domain/repository/authentication_repository.dart'
    as _i2;
import 'package:pokedeal/features/authentication/presentation/bloc/authentication_bloc.dart'
    as _i3;
import 'package:pokedeal/features/collection/data/collection_pokemon_data_source_interface.dart'
    as _i12;
import 'package:pokedeal/features/collection/domain/models/card/base_pokemon_card.dart'
    as _i14;
import 'package:pokedeal/features/collection/domain/models/pokemon_serie.dart'
    as _i16;
import 'package:pokedeal/features/collection/domain/models/pokemon_serie_brief.dart'
    as _i19;
import 'package:pokedeal/features/collection/domain/models/pokemon_set.dart'
    as _i13;
    as _i13;
import 'package:pokedeal/features/collection/domain/models/card/base_pokemon_card.dart'
    as _i15;
import 'package:pokedeal/features/collection/domain/models/card/user_card_collection.dart'
    as _i16;
import 'package:pokedeal/features/collection/domain/models/enum/variant_value.dart'
    as _i22;
import 'package:pokedeal/features/collection/domain/models/pokemon_serie.dart'
    as _i18;
import 'package:pokedeal/features/collection/domain/models/pokemon_serie_brief.dart'
    as _i21;
import 'package:pokedeal/features/collection/domain/models/pokemon_set.dart'
    as _i14;
import 'package:pokedeal/features/collection/domain/repository/collection_pokemon_repository.dart'
    as _i4;
import 'package:pokedeal/features/collection/presentation/bloc/card_bloc/collection_pokemon_card_bloc.dart'
    as _i7;
import 'package:pokedeal/features/collection/presentation/bloc/serie_bloc/collection_pokemon_serie_bloc.dart'
    as _i5;
import 'package:pokedeal/features/collection/presentation/bloc/set_bloc/collection_pokemon_set_bloc.dart'
    as _i6;
import 'package:pokedeal/features/trade/data/trade_data_source_interface.dart'
    as _i15;
import 'package:pokedeal/features/trade/domain/models/trade.dart' as _i21;
import 'package:pokedeal/features/trade/domain/models/userStats.dart' as _i20;
import 'package:pokedeal/features/trade/domain/repository/trade_repository.dart'
    as _i8;
import 'package:pokedeal/features/trade/presentation/bloc/trade_bloc.dart'
import 'package:pokedeal/features/collection/presentation/bloc/user_collection/user_collection_bloc.dart'
    as _i10;
import 'package:pokedeal/features/profile/data/profile_data_source_interface.dart'
    as _i17;
import 'package:pokedeal/features/profile/domain/repository/profile_repository.dart'
    as _i8;
import 'package:pokedeal/features/profile/presentation/bloc/profile_bloc.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthenticationRepository_0 extends _i1.SmartFake
    implements _i2.AuthenticationRepository {
  _FakeAuthenticationRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAuthenticationState_1 extends _i1.SmartFake
    implements _i3.AuthenticationState {
  _FakeAuthenticationState_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCollectionPokemonRepository_2 extends _i1.SmartFake
    implements _i4.CollectionPokemonRepository {
  _FakeCollectionPokemonRepository_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCollectionPokemonSerieState_3 extends _i1.SmartFake
    implements _i5.CollectionPokemonSerieState {
  _FakeCollectionPokemonSerieState_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCollectionPokemonSetState_4 extends _i1.SmartFake
    implements _i6.CollectionPokemonSetState {
  _FakeCollectionPokemonSetState_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCollectionPokemonCardState_5 extends _i1.SmartFake
    implements _i7.CollectionPokemonCardState {
  _FakeCollectionPokemonCardState_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTradeRepository_6 extends _i1.SmartFake
    implements _i8.TradeRepository {
  _FakeTradeRepository_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTradeState_7 extends _i1.SmartFake implements _i9.TradeState {
  _FakeTradeState_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeIAuthenticationDataSource_8 extends _i1.SmartFake
    implements _i10.IAuthenticationDataSource {
  _FakeIAuthenticationDataSource_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserProfile_9 extends _i1.SmartFake implements _i11.UserProfile {
  _FakeUserProfile_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeICollectionPokemonDataSource_10 extends _i1.SmartFake
    implements _i12.ICollectionPokemonDataSource {
  _FakeICollectionPokemonDataSource_10(
=======
class _FakeProfileRepository_6 extends _i1.SmartFake
    implements _i8.ProfileRepository {
  _FakeProfileRepository_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProfileState_7 extends _i1.SmartFake implements _i9.ProfileState {
  _FakeProfileState_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserCollectionState_8 extends _i1.SmartFake
    implements _i10.UserCollectionState {
  _FakeUserCollectionState_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeIAuthenticationDataSource_9 extends _i1.SmartFake
    implements _i11.IAuthenticationDataSource {
  _FakeIAuthenticationDataSource_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserProfile_10 extends _i1.SmartFake implements _i12.UserProfile {
  _FakeUserProfile_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeICollectionPokemonDataSource_11 extends _i1.SmartFake
    implements _i13.ICollectionPokemonDataSource {
  _FakeICollectionPokemonDataSource_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(parent, parentInvocation);
}

class _FakePokemonSet_11 extends _i1.SmartFake implements _i13.PokemonSet {
  _FakePokemonSet_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBasePokemonCard_12 extends _i1.SmartFake
    implements _i14.BasePokemonCard {
  _FakeBasePokemonCard_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeITradeDataSource_13 extends _i1.SmartFake
    implements _i15.ITradeDataSource {
  _FakeITradeDataSource_13(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePokemonSerie_14 extends _i1.SmartFake implements _i16.PokemonSerie {
  _FakePokemonSerie_14(Object parent, Invocation parentInvocation)
=======
class _FakePokemonSet_12 extends _i1.SmartFake implements _i14.PokemonSet {
  _FakePokemonSet_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBasePokemonCard_13 extends _i1.SmartFake
    implements _i15.BasePokemonCard {
  _FakeBasePokemonCard_13(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserCardCollection_14 extends _i1.SmartFake
    implements _i16.UserCardCollection {
  _FakeUserCardCollection_14(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeIProfileDataSource_15 extends _i1.SmartFake
    implements _i17.IProfileDataSource {
  _FakeIProfileDataSource_15(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePokemonSerie_16 extends _i1.SmartFake implements _i18.PokemonSerie {
  _FakePokemonSerie_16(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthenticationBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationBloc extends _i1.Mock
    implements _i3.AuthenticationBloc {
  @override
  _i2.AuthenticationRepository get authenticationRepository =>
      (super.noSuchMethod(
            Invocation.getter(#authenticationRepository),
            returnValue: _FakeAuthenticationRepository_0(
              this,
              Invocation.getter(#authenticationRepository),
            ),
            returnValueForMissingStub: _FakeAuthenticationRepository_0(
              this,
              Invocation.getter(#authenticationRepository),
            ),
          )
          as _i2.AuthenticationRepository);

  @override
  _i3.AuthenticationState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeAuthenticationState_1(
              this,
              Invocation.getter(#state),
            ),
            returnValueForMissingStub: _FakeAuthenticationState_1(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i3.AuthenticationState);

  @override
  _i17.Stream<_i3.AuthenticationState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i17.Stream<_i3.AuthenticationState>.empty(),
            returnValueForMissingStub:
                _i17.Stream<_i3.AuthenticationState>.empty(),
          )
          as _i17.Stream<_i3.AuthenticationState>);
  _i19.Stream<_i3.AuthenticationState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i19.Stream<_i3.AuthenticationState>.empty(),
            returnValueForMissingStub:
                _i19.Stream<_i3.AuthenticationState>.empty(),
          )
          as _i19.Stream<_i3.AuthenticationState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void add(_i3.AuthenticationEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i3.AuthenticationEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i3.AuthenticationState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i3.AuthenticationEvent>(
    _i18.EventHandler<E, _i3.AuthenticationState>? handler, {
    _i18.EventTransformer<E>? transformer,

  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(

    _i18.Transition<_i3.AuthenticationEvent, _i3.AuthenticationState>?
    transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i17.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i17.Future<void>.value(),
            returnValueForMissingStub: _i17.Future<void>.value(),
          )
          as _i17.Future<void>);

  @override
  void onChange(_i18.Change<_i3.AuthenticationState>? change) =>
  _i19.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i19.Future<void>.value(),
            returnValueForMissingStub: _i19.Future<void>.value(),
          )
          as _i19.Future<void>);

  @override
  void onChange(_i20.Change<_i3.AuthenticationState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [CollectionPokemonSerieBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockCollectionPokemonSerieBloc extends _i1.Mock
    implements _i5.CollectionPokemonSerieBloc {
  @override
  _i4.CollectionPokemonRepository get collectionPokemonRepository =>
      (super.noSuchMethod(
            Invocation.getter(#collectionPokemonRepository),
            returnValue: _FakeCollectionPokemonRepository_2(
              this,
              Invocation.getter(#collectionPokemonRepository),
            ),
            returnValueForMissingStub: _FakeCollectionPokemonRepository_2(
              this,
              Invocation.getter(#collectionPokemonRepository),
            ),
          )
          as _i4.CollectionPokemonRepository);

  @override
  _i5.CollectionPokemonSerieState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeCollectionPokemonSerieState_3(
              this,
              Invocation.getter(#state),
            ),
            returnValueForMissingStub: _FakeCollectionPokemonSerieState_3(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i5.CollectionPokemonSerieState);

  @override
  _i17.Stream<_i5.CollectionPokemonSerieState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i17.Stream<_i5.CollectionPokemonSerieState>.empty(),
            returnValueForMissingStub:
                _i17.Stream<_i5.CollectionPokemonSerieState>.empty(),
          )
          as _i17.Stream<_i5.CollectionPokemonSerieState>);
  _i19.Stream<_i5.CollectionPokemonSerieState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i19.Stream<_i5.CollectionPokemonSerieState>.empty(),
            returnValueForMissingStub:
                _i19.Stream<_i5.CollectionPokemonSerieState>.empty(),
          )
          as _i19.Stream<_i5.CollectionPokemonSerieState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void add(_i5.CollectionPokemonSerieEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i5.CollectionPokemonSerieEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i5.CollectionPokemonSerieState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i5.CollectionPokemonSerieEvent>(
    _i18.EventHandler<E, _i5.CollectionPokemonSerieState>? handler, {
    _i18.EventTransformer<E>? transformer,
    _i20.EventHandler<E, _i5.CollectionPokemonSerieState>? handler, {
    _i20.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i18.Transition<
      _i5.CollectionPokemonSerieEvent,
      _i5.CollectionPokemonSerieState
    >?
    transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i17.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i17.Future<void>.value(),
            returnValueForMissingStub: _i17.Future<void>.value(),
          )
          as _i17.Future<void>);

  @override
  void onChange(_i18.Change<_i5.CollectionPokemonSerieState>? change) =>

      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [CollectionPokemonSetBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockCollectionPokemonSetBloc extends _i1.Mock
    implements _i6.CollectionPokemonSetBloc {
  @override
  _i4.CollectionPokemonRepository get collectionPokemonRepository =>
      (super.noSuchMethod(
            Invocation.getter(#collectionPokemonRepository),
            returnValue: _FakeCollectionPokemonRepository_2(
              this,
              Invocation.getter(#collectionPokemonRepository),
            ),
            returnValueForMissingStub: _FakeCollectionPokemonRepository_2(
              this,
              Invocation.getter(#collectionPokemonRepository),
            ),
          )
          as _i4.CollectionPokemonRepository);

  @override
  _i6.CollectionPokemonSetState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeCollectionPokemonSetState_4(
              this,
              Invocation.getter(#state),
            ),
            returnValueForMissingStub: _FakeCollectionPokemonSetState_4(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i6.CollectionPokemonSetState);

  @override
  _i17.Stream<_i6.CollectionPokemonSetState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i17.Stream<_i6.CollectionPokemonSetState>.empty(),
            returnValueForMissingStub:
                _i17.Stream<_i6.CollectionPokemonSetState>.empty(),
          )
          as _i17.Stream<_i6.CollectionPokemonSetState>);


  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void add(_i6.CollectionPokemonSetEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i6.CollectionPokemonSetEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i6.CollectionPokemonSetState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i6.CollectionPokemonSetEvent>(
    _i18.EventHandler<E, _i6.CollectionPokemonSetState>? handler, {
    _i18.EventTransformer<E>? transformer,

  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i18.Transition<

      _i6.CollectionPokemonSetEvent,
      _i6.CollectionPokemonSetState
    >?
    transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override

  _i17.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i17.Future<void>.value(),
            returnValueForMissingStub: _i17.Future<void>.value(),
          )
          as _i17.Future<void>);

  @override
  void onChange(_i18.Change<_i6.CollectionPokemonSetState>? change) =>

  _i19.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i19.Future<void>.value(),
            returnValueForMissingStub: _i19.Future<void>.value(),
          )
          as _i19.Future<void>);

  @override
  void onChange(_i20.Change<_i6.CollectionPokemonSetState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [CollectionPokemonCardBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockCollectionPokemonCardBloc extends _i1.Mock
    implements _i7.CollectionPokemonCardBloc {
  @override
  _i4.CollectionPokemonRepository get collectionPokemonRepository =>
      (super.noSuchMethod(
            Invocation.getter(#collectionPokemonRepository),
            returnValue: _FakeCollectionPokemonRepository_2(
              this,
              Invocation.getter(#collectionPokemonRepository),
            ),
            returnValueForMissingStub: _FakeCollectionPokemonRepository_2(
              this,
              Invocation.getter(#collectionPokemonRepository),
            ),
          )
          as _i4.CollectionPokemonRepository);

  @override
  _i7.CollectionPokemonCardState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeCollectionPokemonCardState_5(
              this,
              Invocation.getter(#state),
            ),
            returnValueForMissingStub: _FakeCollectionPokemonCardState_5(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i7.CollectionPokemonCardState);

  @override
  _i17.Stream<_i7.CollectionPokemonCardState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i17.Stream<_i7.CollectionPokemonCardState>.empty(),
            returnValueForMissingStub:
                _i17.Stream<_i7.CollectionPokemonCardState>.empty(),
          )
          as _i17.Stream<_i7.CollectionPokemonCardState>);


  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void add(_i7.CollectionPokemonCardEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i7.CollectionPokemonCardEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i7.CollectionPokemonCardState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i7.CollectionPokemonCardEvent>(

    _i18.EventHandler<E, _i7.CollectionPokemonCardState>? handler, {
    _i18.EventTransformer<E>? transformer,

  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
      _i7.CollectionPokemonCardEvent,
      _i7.CollectionPokemonCardState
    >?
    transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override

  _i19.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i19.Future<void>.value(),
            returnValueForMissingStub: _i19.Future<void>.value(),
          )
          as _i19.Future<void>);

  @override
  void onChange(_i20.Change<_i7.CollectionPokemonCardState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ProfileBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockProfileBloc extends _i1.Mock implements _i9.ProfileBloc {
  @override
  _i8.ProfileRepository get profileRepository =>
      (super.noSuchMethod(
            Invocation.getter(#profileRepository),
            returnValue: _FakeProfileRepository_6(
              this,
              Invocation.getter(#profileRepository),
            ),
            returnValueForMissingStub: _FakeProfileRepository_6(
              this,
              Invocation.getter(#profileRepository),
            ),
          )
          as _i8.ProfileRepository);

  @override
  _i9.ProfileState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeProfileState_7(this, Invocation.getter(#state)),
            returnValueForMissingStub: _FakeProfileState_7(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i9.ProfileState);

  @override
  _i19.Stream<_i9.ProfileState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i19.Stream<_i9.ProfileState>.empty(),
            returnValueForMissingStub: _i19.Stream<_i9.ProfileState>.empty(),
          )
          as _i19.Stream<_i9.ProfileState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i19.Future<void> onProfileLoadEvent(
    _i9.ProfileLoadEvent? event,
    _i20.Emitter<_i9.ProfileState>? emit,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#onProfileLoadEvent, [event, emit]),
            returnValue: _i19.Future<void>.value(),
            returnValueForMissingStub: _i19.Future<void>.value(),
          )
          as _i19.Future<void>);

  @override
  void add(_i9.ProfileEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i9.ProfileEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i9.ProfileState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i9.ProfileEvent>(
    _i20.EventHandler<E, _i9.ProfileState>? handler, {
    _i20.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i20.Transition<_i9.ProfileEvent, _i9.ProfileState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i19.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i19.Future<void>.value(),
            returnValueForMissingStub: _i19.Future<void>.value(),
          )
          as _i19.Future<void>);

  @override
  void onChange(_i20.Change<_i9.ProfileState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [UserCollectionBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserCollectionBloc extends _i1.Mock
    implements _i10.UserCollectionBloc {
  @override
  _i4.CollectionPokemonRepository get collectionPokemonRepository =>
      (super.noSuchMethod(
            Invocation.getter(#collectionPokemonRepository),
            returnValue: _FakeCollectionPokemonRepository_2(
              this,
              Invocation.getter(#collectionPokemonRepository),
            ),
            returnValueForMissingStub: _FakeCollectionPokemonRepository_2(
              this,
              Invocation.getter(#collectionPokemonRepository),
            ),
          )
          as _i4.CollectionPokemonRepository);

  @override
  _i10.UserCollectionState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeUserCollectionState_8(
              this,
              Invocation.getter(#state),
            ),
            returnValueForMissingStub: _FakeUserCollectionState_8(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i10.UserCollectionState);

  @override
  _i19.Stream<_i10.UserCollectionState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i19.Stream<_i10.UserCollectionState>.empty(),
            returnValueForMissingStub:
                _i19.Stream<_i10.UserCollectionState>.empty(),
          )
          as _i19.Stream<_i10.UserCollectionState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i19.Future<void> onUserCollectionLoadEvent(
    _i10.UserCollectionLoadEvent? event,
    _i20.Emitter<_i10.UserCollectionState>? emit,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#onUserCollectionLoadEvent, [event, emit]),
            returnValue: _i19.Future<void>.value(),
            returnValueForMissingStub: _i19.Future<void>.value(),
          )
          as _i19.Future<void>);

  @override
  _i19.Future<void> onUserCollectionAddCardEvent(
    _i10.UserCollectionAddCardEvent? event,
    _i20.Emitter<_i10.UserCollectionState>? emit,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#onUserCollectionAddCardEvent, [event, emit]),
            returnValue: _i19.Future<void>.value(),
            returnValueForMissingStub: _i19.Future<void>.value(),
          )
          as _i19.Future<void>);

  @override
  void add(_i10.UserCollectionEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i10.UserCollectionEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i10.UserCollectionState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i10.UserCollectionEvent>(
    _i20.EventHandler<E, _i10.UserCollectionState>? handler, {
    _i20.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i20.Transition<_i10.UserCollectionEvent, _i10.UserCollectionState>?
    transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i19.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i19.Future<void>.value(),
            returnValueForMissingStub: _i19.Future<void>.value(),
          )
          as _i19.Future<void>);

  @override
  void onChange(_i20.Change<_i10.UserCollectionState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [TradeBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTradeBloc extends _i1.Mock implements _i9.TradeBloc {
  @override
  _i8.TradeRepository get tradeRepository =>
      (super.noSuchMethod(
            Invocation.getter(#tradeRepository),
            returnValue: _FakeTradeRepository_6(
              this,
              Invocation.getter(#tradeRepository),
            ),
            returnValueForMissingStub: _FakeTradeRepository_6(
              this,
              Invocation.getter(#tradeRepository),
            ),
          )
          as _i8.TradeRepository);

  @override
  _i9.TradeState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeTradeState_7(this, Invocation.getter(#state)),
            returnValueForMissingStub: _FakeTradeState_7(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i9.TradeState);

  @override
  _i17.Stream<_i9.TradeState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i17.Stream<_i9.TradeState>.empty(),
            returnValueForMissingStub: _i17.Stream<_i9.TradeState>.empty(),
          )
          as _i17.Stream<_i9.TradeState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void add(_i9.TradeEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i9.TradeEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i9.TradeState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i9.TradeEvent>(
    _i18.EventHandler<E, _i9.TradeState>? handler, {
    _i18.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i18.Transition<_i9.TradeEvent, _i9.TradeState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i17.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i17.Future<void>.value(),
            returnValueForMissingStub: _i17.Future<void>.value(),
          )
          as _i17.Future<void>);

  @override
  void onChange(_i18.Change<_i9.TradeState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AuthenticationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationRepository extends _i1.Mock
    implements _i2.AuthenticationRepository {
  @override
  set userProfile(_i11.UserProfile? _userProfile) => super.noSuchMethod(

    Invocation.setter(#userProfile, _userProfile),
    returnValueForMissingStub: null,
  );

  @override

  _i11.IAuthenticationDataSource get authenticationDataSource =>
      (super.noSuchMethod(
            Invocation.getter(#authenticationDataSource),
            returnValue: _FakeIAuthenticationDataSource_9(
              this,
              Invocation.getter(#authenticationDataSource),
            ),
            returnValueForMissingStub: _FakeIAuthenticationDataSource_9(

              this,
              Invocation.getter(#authenticationDataSource),
            ),
          )

    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithEmail, [email, password]),

                this,
                Invocation.method(#signInWithEmail, [email, password]),
              ),
            ),

                this,
                Invocation.method(#signInWithEmail, [email, password]),
              ),
            ),
          )

    String? email,
    String? password,
    String? pseudo,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#signUpWithEmail, [email, password, pseudo]),

                this,
                Invocation.method(#signUpWithEmail, [email, password, pseudo]),
              ),
            ),

                this,
                Invocation.method(#signUpWithEmail, [email, password, pseudo]),
              ),
            ),
          )

}

/// A class which mocks [CollectionPokemonRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCollectionPokemonRepository extends _i1.Mock
    implements _i4.CollectionPokemonRepository {
  @override

              this,
              Invocation.getter(#collectionPokemonDataSource),
            ),
          )

      super.noSuchMethod(
        Invocation.setter(#seriesBriefs, _seriesBriefs),
        returnValueForMissingStub: null,
      );

  @override

    Invocation.setter(#series, _series),
    returnValueForMissingStub: null,
  );

  @override

    Invocation.setter(#setsMap, _setsMap),
    returnValueForMissingStub: null,
  );

                this,
                Invocation.method(#getSetWithCards, [], {#setId: setId}),
              ),
            ),

}

/// A class which mocks [IAuthenticationDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAuthenticationDataSource extends _i1.Mock

    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithEmail, [email, password]),

                this,
                Invocation.method(#signInWithEmail, [email, password]),
              ),
            ),

                this,
                Invocation.method(#signInWithEmail, [email, password]),
              ),
            ),
          )

    String? email,
    String? password,
    String? pseudo,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#signUpWithEmail, [email, password, pseudo]),

                this,
                Invocation.method(#signUpWithEmail, [email, password, pseudo]),
              ),
            ),
   this,
                Invocation.method(#signUpWithEmail, [email, password, pseudo]),
              ),
            ),
          )
