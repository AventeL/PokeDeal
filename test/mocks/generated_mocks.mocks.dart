// Mocks generated by Mockito 5.4.5 from annotations
// in pokedeal/test/mocks/generated_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i28;

import 'package:bloc/bloc.dart' as _i29;
import 'package:mockito/mockito.dart' as _i1;
import 'package:pokedeal/features/authentication/data/authentication_data_source_interface.dart'
    as _i15;
import 'package:pokedeal/features/authentication/domain/models/user_profile.dart'
    as _i16;
import 'package:pokedeal/features/authentication/domain/repository/authentication_repository.dart'
    as _i2;
import 'package:pokedeal/features/authentication/presentation/bloc/authentication_bloc.dart'
    as _i3;
import 'package:pokedeal/features/collection/data/collection_pokemon_data_source_interface.dart'
    as _i17;
import 'package:pokedeal/features/collection/domain/models/card/base_pokemon_card.dart'
    as _i19;
import 'package:pokedeal/features/collection/domain/models/card/user_card_collection.dart'
    as _i20;
import 'package:pokedeal/features/collection/domain/models/enum/variant_value.dart'
    as _i31;
import 'package:pokedeal/features/collection/domain/models/pokemon_serie.dart'
    as _i27;
import 'package:pokedeal/features/collection/domain/models/pokemon_serie_brief.dart'
    as _i30;
import 'package:pokedeal/features/collection/domain/models/pokemon_set.dart'
    as _i18;
import 'package:pokedeal/features/collection/domain/repository/collection_pokemon_repository.dart'
    as _i4;
import 'package:pokedeal/features/collection/presentation/bloc/card_bloc/collection_pokemon_card_bloc.dart'
    as _i7;
import 'package:pokedeal/features/collection/presentation/bloc/serie_bloc/collection_pokemon_serie_bloc.dart'
    as _i5;
import 'package:pokedeal/features/collection/presentation/bloc/set_bloc/collection_pokemon_set_bloc.dart'
    as _i6;
import 'package:pokedeal/features/collection/presentation/bloc/user_collection/user_collection_bloc.dart'
    as _i12;
import 'package:pokedeal/features/discussion/data/discussion_data_source_interface.dart'
    as _i24;
import 'package:pokedeal/features/discussion/domain/model/discussion.dart'
    as _i25;
import 'package:pokedeal/features/discussion/domain/model/message.dart' as _i26;
import 'package:pokedeal/features/discussion/domain/repository/discussion_repository.dart'
    as _i13;
import 'package:pokedeal/features/discussion/presentation/bloc/discussion_bloc.dart'
    as _i14;
import 'package:pokedeal/features/profile/data/profile_data_source_interface.dart'
    as _i22;
import 'package:pokedeal/features/profile/domain/model/user_profile_with_stats.dart'
    as _i23;
import 'package:pokedeal/features/profile/domain/repository/profile_repository.dart'
    as _i10;
import 'package:pokedeal/features/profile/presentation/bloc/profile_bloc.dart'
    as _i11;
import 'package:pokedeal/features/trade/data/trade_data_source_interface.dart'
    as _i21;
import 'package:pokedeal/features/trade/domain/models/trade.dart' as _i33;
import 'package:pokedeal/features/trade/domain/models/trade_request_data.dart'
    as _i34;
import 'package:pokedeal/features/trade/domain/models/user_stats.dart' as _i32;
import 'package:pokedeal/features/trade/domain/repository/trade_repository.dart'
    as _i8;
import 'package:pokedeal/features/trade/presentation/bloc/trade_bloc.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthenticationRepository_0 extends _i1.SmartFake
    implements _i2.AuthenticationRepository {
  _FakeAuthenticationRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAuthenticationState_1 extends _i1.SmartFake
    implements _i3.AuthenticationState {
  _FakeAuthenticationState_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCollectionPokemonRepository_2 extends _i1.SmartFake
    implements _i4.CollectionPokemonRepository {
  _FakeCollectionPokemonRepository_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCollectionPokemonSerieState_3 extends _i1.SmartFake
    implements _i5.CollectionPokemonSerieState {
  _FakeCollectionPokemonSerieState_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCollectionPokemonSetState_4 extends _i1.SmartFake
    implements _i6.CollectionPokemonSetState {
  _FakeCollectionPokemonSetState_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCollectionPokemonCardState_5 extends _i1.SmartFake
    implements _i7.CollectionPokemonCardState {
  _FakeCollectionPokemonCardState_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTradeRepository_6 extends _i1.SmartFake
    implements _i8.TradeRepository {
  _FakeTradeRepository_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTradeState_7 extends _i1.SmartFake implements _i9.TradeState {
  _FakeTradeState_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProfileRepository_8 extends _i1.SmartFake
    implements _i10.ProfileRepository {
  _FakeProfileRepository_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProfileState_9 extends _i1.SmartFake implements _i11.ProfileState {
  _FakeProfileState_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserCollectionState_10 extends _i1.SmartFake
    implements _i12.UserCollectionState {
  _FakeUserCollectionState_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDiscussionRepository_11 extends _i1.SmartFake
    implements _i13.DiscussionRepository {
  _FakeDiscussionRepository_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDiscussionState_12 extends _i1.SmartFake
    implements _i14.DiscussionState {
  _FakeDiscussionState_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeIAuthenticationDataSource_13 extends _i1.SmartFake
    implements _i15.IAuthenticationDataSource {
  _FakeIAuthenticationDataSource_13(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserProfile_14 extends _i1.SmartFake implements _i16.UserProfile {
  _FakeUserProfile_14(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeICollectionPokemonDataSource_15 extends _i1.SmartFake
    implements _i17.ICollectionPokemonDataSource {
  _FakeICollectionPokemonDataSource_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(parent, parentInvocation);
}

class _FakePokemonSet_16 extends _i1.SmartFake implements _i18.PokemonSet {
  _FakePokemonSet_16(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBasePokemonCard_17 extends _i1.SmartFake
    implements _i19.BasePokemonCard {
  _FakeBasePokemonCard_17(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserCardCollection_18 extends _i1.SmartFake
    implements _i20.UserCardCollection {
  _FakeUserCardCollection_18(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeITradeDataSource_19 extends _i1.SmartFake
    implements _i21.ITradeDataSource {
  _FakeITradeDataSource_19(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeIProfileDataSource_20 extends _i1.SmartFake
    implements _i22.IProfileDataSource {
  _FakeIProfileDataSource_20(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserProfileWithStats_21 extends _i1.SmartFake
    implements _i23.UserProfileWithStats {
  _FakeUserProfileWithStats_21(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeIDiscussionDataSource_22 extends _i1.SmartFake
    implements _i24.IDiscussionDataSource {
  _FakeIDiscussionDataSource_22(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDiscussion_23 extends _i1.SmartFake implements _i25.Discussion {
  _FakeDiscussion_23(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMessage_24 extends _i1.SmartFake implements _i26.Message {
  _FakeMessage_24(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePokemonSerie_25 extends _i1.SmartFake implements _i27.PokemonSerie {
  _FakePokemonSerie_25(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthenticationBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationBloc extends _i1.Mock
    implements _i3.AuthenticationBloc {
  @override
  _i2.AuthenticationRepository get authenticationRepository =>
      (super.noSuchMethod(
            Invocation.getter(#authenticationRepository),
            returnValue: _FakeAuthenticationRepository_0(
              this,
              Invocation.getter(#authenticationRepository),
            ),
            returnValueForMissingStub: _FakeAuthenticationRepository_0(
              this,
              Invocation.getter(#authenticationRepository),
            ),
          )
          as _i2.AuthenticationRepository);

  @override
  _i3.AuthenticationState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeAuthenticationState_1(
              this,
              Invocation.getter(#state),
            ),
            returnValueForMissingStub: _FakeAuthenticationState_1(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i3.AuthenticationState);

  @override
  _i28.Stream<_i3.AuthenticationState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i28.Stream<_i3.AuthenticationState>.empty(),
            returnValueForMissingStub:
                _i28.Stream<_i3.AuthenticationState>.empty(),
          )
          as _i28.Stream<_i3.AuthenticationState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void add(_i3.AuthenticationEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i3.AuthenticationEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i3.AuthenticationState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i3.AuthenticationEvent>(
    _i29.EventHandler<E, _i3.AuthenticationState>? handler, {
    _i29.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i29.Transition<_i3.AuthenticationEvent, _i3.AuthenticationState>?
    transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i28.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  void onChange(_i29.Change<_i3.AuthenticationState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [CollectionPokemonSerieBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockCollectionPokemonSerieBloc extends _i1.Mock
    implements _i5.CollectionPokemonSerieBloc {
  @override
  _i4.CollectionPokemonRepository get collectionPokemonRepository =>
      (super.noSuchMethod(
            Invocation.getter(#collectionPokemonRepository),
            returnValue: _FakeCollectionPokemonRepository_2(
              this,
              Invocation.getter(#collectionPokemonRepository),
            ),
            returnValueForMissingStub: _FakeCollectionPokemonRepository_2(
              this,
              Invocation.getter(#collectionPokemonRepository),
            ),
          )
          as _i4.CollectionPokemonRepository);

  @override
  _i5.CollectionPokemonSerieState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeCollectionPokemonSerieState_3(
              this,
              Invocation.getter(#state),
            ),
            returnValueForMissingStub: _FakeCollectionPokemonSerieState_3(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i5.CollectionPokemonSerieState);

  @override
  _i28.Stream<_i5.CollectionPokemonSerieState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i28.Stream<_i5.CollectionPokemonSerieState>.empty(),
            returnValueForMissingStub:
                _i28.Stream<_i5.CollectionPokemonSerieState>.empty(),
          )
          as _i28.Stream<_i5.CollectionPokemonSerieState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void add(_i5.CollectionPokemonSerieEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i5.CollectionPokemonSerieEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i5.CollectionPokemonSerieState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i5.CollectionPokemonSerieEvent>(
    _i29.EventHandler<E, _i5.CollectionPokemonSerieState>? handler, {
    _i29.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i29.Transition<
      _i5.CollectionPokemonSerieEvent,
      _i5.CollectionPokemonSerieState
    >?
    transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i28.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  void onChange(_i29.Change<_i5.CollectionPokemonSerieState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [CollectionPokemonSetBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockCollectionPokemonSetBloc extends _i1.Mock
    implements _i6.CollectionPokemonSetBloc {
  @override
  _i4.CollectionPokemonRepository get collectionPokemonRepository =>
      (super.noSuchMethod(
            Invocation.getter(#collectionPokemonRepository),
            returnValue: _FakeCollectionPokemonRepository_2(
              this,
              Invocation.getter(#collectionPokemonRepository),
            ),
            returnValueForMissingStub: _FakeCollectionPokemonRepository_2(
              this,
              Invocation.getter(#collectionPokemonRepository),
            ),
          )
          as _i4.CollectionPokemonRepository);

  @override
  _i6.CollectionPokemonSetState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeCollectionPokemonSetState_4(
              this,
              Invocation.getter(#state),
            ),
            returnValueForMissingStub: _FakeCollectionPokemonSetState_4(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i6.CollectionPokemonSetState);

  @override
  _i28.Stream<_i6.CollectionPokemonSetState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i28.Stream<_i6.CollectionPokemonSetState>.empty(),
            returnValueForMissingStub:
                _i28.Stream<_i6.CollectionPokemonSetState>.empty(),
          )
          as _i28.Stream<_i6.CollectionPokemonSetState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void add(_i6.CollectionPokemonSetEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i6.CollectionPokemonSetEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i6.CollectionPokemonSetState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i6.CollectionPokemonSetEvent>(
    _i29.EventHandler<E, _i6.CollectionPokemonSetState>? handler, {
    _i29.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i29.Transition<
      _i6.CollectionPokemonSetEvent,
      _i6.CollectionPokemonSetState
    >?
    transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i28.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  void onChange(_i29.Change<_i6.CollectionPokemonSetState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [CollectionPokemonCardBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockCollectionPokemonCardBloc extends _i1.Mock
    implements _i7.CollectionPokemonCardBloc {
  @override
  _i4.CollectionPokemonRepository get collectionPokemonRepository =>
      (super.noSuchMethod(
            Invocation.getter(#collectionPokemonRepository),
            returnValue: _FakeCollectionPokemonRepository_2(
              this,
              Invocation.getter(#collectionPokemonRepository),
            ),
            returnValueForMissingStub: _FakeCollectionPokemonRepository_2(
              this,
              Invocation.getter(#collectionPokemonRepository),
            ),
          )
          as _i4.CollectionPokemonRepository);

  @override
  _i7.CollectionPokemonCardState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeCollectionPokemonCardState_5(
              this,
              Invocation.getter(#state),
            ),
            returnValueForMissingStub: _FakeCollectionPokemonCardState_5(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i7.CollectionPokemonCardState);

  @override
  _i28.Stream<_i7.CollectionPokemonCardState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i28.Stream<_i7.CollectionPokemonCardState>.empty(),
            returnValueForMissingStub:
                _i28.Stream<_i7.CollectionPokemonCardState>.empty(),
          )
          as _i28.Stream<_i7.CollectionPokemonCardState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void add(_i7.CollectionPokemonCardEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i7.CollectionPokemonCardEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i7.CollectionPokemonCardState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i7.CollectionPokemonCardEvent>(
    _i29.EventHandler<E, _i7.CollectionPokemonCardState>? handler, {
    _i29.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i29.Transition<
      _i7.CollectionPokemonCardEvent,
      _i7.CollectionPokemonCardState
    >?
    transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i28.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  void onChange(_i29.Change<_i7.CollectionPokemonCardState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [TradeBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTradeBloc extends _i1.Mock implements _i9.TradeBloc {
  @override
  _i8.TradeRepository get tradeRepository =>
      (super.noSuchMethod(
            Invocation.getter(#tradeRepository),
            returnValue: _FakeTradeRepository_6(
              this,
              Invocation.getter(#tradeRepository),
            ),
            returnValueForMissingStub: _FakeTradeRepository_6(
              this,
              Invocation.getter(#tradeRepository),
            ),
          )
          as _i8.TradeRepository);

  @override
  _i9.TradeState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeTradeState_7(this, Invocation.getter(#state)),
            returnValueForMissingStub: _FakeTradeState_7(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i9.TradeState);

  @override
  _i28.Stream<_i9.TradeState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i28.Stream<_i9.TradeState>.empty(),
            returnValueForMissingStub: _i28.Stream<_i9.TradeState>.empty(),
          )
          as _i28.Stream<_i9.TradeState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void add(_i9.TradeEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i9.TradeEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i9.TradeState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i9.TradeEvent>(
    _i29.EventHandler<E, _i9.TradeState>? handler, {
    _i29.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i29.Transition<_i9.TradeEvent, _i9.TradeState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i28.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  void onChange(_i29.Change<_i9.TradeState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ProfileBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockProfileBloc extends _i1.Mock implements _i11.ProfileBloc {
  @override
  _i10.ProfileRepository get profileRepository =>
      (super.noSuchMethod(
            Invocation.getter(#profileRepository),
            returnValue: _FakeProfileRepository_8(
              this,
              Invocation.getter(#profileRepository),
            ),
            returnValueForMissingStub: _FakeProfileRepository_8(
              this,
              Invocation.getter(#profileRepository),
            ),
          )
          as _i10.ProfileRepository);

  @override
  _i11.ProfileState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeProfileState_9(this, Invocation.getter(#state)),
            returnValueForMissingStub: _FakeProfileState_9(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i11.ProfileState);

  @override
  _i28.Stream<_i11.ProfileState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i28.Stream<_i11.ProfileState>.empty(),
            returnValueForMissingStub: _i28.Stream<_i11.ProfileState>.empty(),
          )
          as _i28.Stream<_i11.ProfileState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i28.Future<void> onProfileLoadEvent(
    _i11.ProfileLoadEvent? event,
    _i29.Emitter<_i11.ProfileState>? emit,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#onProfileLoadEvent, [event, emit]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> onProfileUpdateEvent(
    _i11.ProfileUpdateEvent? event,
    _i29.Emitter<_i11.ProfileState>? emit,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#onProfileUpdateEvent, [event, emit]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> onChangePasswordEvent(
    _i11.ChangePasswordEvent? event,
    _i29.Emitter<_i11.ProfileState>? emit,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#onChangePasswordEvent, [event, emit]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  void add(_i11.ProfileEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i11.ProfileEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i11.ProfileState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i11.ProfileEvent>(
    _i29.EventHandler<E, _i11.ProfileState>? handler, {
    _i29.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i29.Transition<_i11.ProfileEvent, _i11.ProfileState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i28.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  void onChange(_i29.Change<_i11.ProfileState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [UserCollectionBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserCollectionBloc extends _i1.Mock
    implements _i12.UserCollectionBloc {
  @override
  _i4.CollectionPokemonRepository get collectionPokemonRepository =>
      (super.noSuchMethod(
            Invocation.getter(#collectionPokemonRepository),
            returnValue: _FakeCollectionPokemonRepository_2(
              this,
              Invocation.getter(#collectionPokemonRepository),
            ),
            returnValueForMissingStub: _FakeCollectionPokemonRepository_2(
              this,
              Invocation.getter(#collectionPokemonRepository),
            ),
          )
          as _i4.CollectionPokemonRepository);

  @override
  _i12.UserCollectionState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeUserCollectionState_10(
              this,
              Invocation.getter(#state),
            ),
            returnValueForMissingStub: _FakeUserCollectionState_10(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i12.UserCollectionState);

  @override
  _i28.Stream<_i12.UserCollectionState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i28.Stream<_i12.UserCollectionState>.empty(),
            returnValueForMissingStub:
                _i28.Stream<_i12.UserCollectionState>.empty(),
          )
          as _i28.Stream<_i12.UserCollectionState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i28.Future<void> onUserCollectionLoadSetEvent(
    _i12.UserCollectionLoadSetEvent? event,
    _i29.Emitter<_i12.UserCollectionState>? emit,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#onUserCollectionLoadSetEvent, [event, emit]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> onUserCollectionLoadCardEvent(
    _i12.UserCollectionLoadCardEvent? event,
    _i29.Emitter<_i12.UserCollectionState>? emit,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#onUserCollectionLoadCardEvent, [event, emit]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> onUserCollectionAddCardEvent(
    _i12.UserCollectionAddCardEvent? event,
    _i29.Emitter<_i12.UserCollectionState>? emit,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#onUserCollectionAddCardEvent, [event, emit]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> onUserCollectionLoadAllEvent(
    _i12.UserCollectionLoadAllEvent? event,
    _i29.Emitter<_i12.UserCollectionState>? emit,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#onUserCollectionLoadAllEvent, [event, emit]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> onUserCollectionDeleteCardEvent(
    _i12.UserCollectionDeleteCardEvent? event,
    _i29.Emitter<_i12.UserCollectionState>? emit,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#onUserCollectionDeleteCardEvent, [event, emit]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  void add(_i12.UserCollectionEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i12.UserCollectionEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i12.UserCollectionState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i12.UserCollectionEvent>(
    _i29.EventHandler<E, _i12.UserCollectionState>? handler, {
    _i29.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i29.Transition<_i12.UserCollectionEvent, _i12.UserCollectionState>?
    transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i28.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  void onChange(_i29.Change<_i12.UserCollectionState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [DiscussionBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockDiscussionBloc extends _i1.Mock implements _i14.DiscussionBloc {
  @override
  _i13.DiscussionRepository get discussionRepository =>
      (super.noSuchMethod(
            Invocation.getter(#discussionRepository),
            returnValue: _FakeDiscussionRepository_11(
              this,
              Invocation.getter(#discussionRepository),
            ),
            returnValueForMissingStub: _FakeDiscussionRepository_11(
              this,
              Invocation.getter(#discussionRepository),
            ),
          )
          as _i13.DiscussionRepository);

  @override
  _i14.DiscussionState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeDiscussionState_12(
              this,
              Invocation.getter(#state),
            ),
            returnValueForMissingStub: _FakeDiscussionState_12(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i14.DiscussionState);

  @override
  _i28.Stream<_i14.DiscussionState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i28.Stream<_i14.DiscussionState>.empty(),
            returnValueForMissingStub:
                _i28.Stream<_i14.DiscussionState>.empty(),
          )
          as _i28.Stream<_i14.DiscussionState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void onDiscussionSubscribe(
    _i14.DiscussionEventSubscribeToMessages? event,
    _i29.Emitter<_i14.DiscussionState>? emit,
  ) => super.noSuchMethod(
    Invocation.method(#onDiscussionSubscribe, [event, emit]),
    returnValueForMissingStub: null,
  );

  @override
  _i28.Future<void> onDiscussionGetByTradeId(
    _i14.DiscussionEventGetDiscussionByTradeId? event,
    _i29.Emitter<_i14.DiscussionState>? emit,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#onDiscussionGetByTradeId, [event, emit]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> onDiscussionSendMessage(
    _i14.DiscussionEventSendMessage? event,
    _i29.Emitter<_i14.DiscussionState>? emit,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#onDiscussionSendMessage, [event, emit]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  void onNewMessageReceived(
    _i14.DiscussionEventNewMessageReceived? event,
    _i29.Emitter<_i14.DiscussionState>? emit,
  ) => super.noSuchMethod(
    Invocation.method(#onNewMessageReceived, [event, emit]),
    returnValueForMissingStub: null,
  );

  @override
  void onDiscussionUnsubscribe(
    _i14.DiscussionEventUnsubscribeFromMessages? event,
    _i29.Emitter<_i14.DiscussionState>? emit,
  ) => super.noSuchMethod(
    Invocation.method(#onDiscussionUnsubscribe, [event, emit]),
    returnValueForMissingStub: null,
  );

  @override
  void add(_i14.DiscussionEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i14.DiscussionEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i14.DiscussionState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i14.DiscussionEvent>(
    _i29.EventHandler<E, _i14.DiscussionState>? handler, {
    _i29.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i29.Transition<_i14.DiscussionEvent, _i14.DiscussionState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i28.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  void onChange(_i29.Change<_i14.DiscussionState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AuthenticationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationRepository extends _i1.Mock
    implements _i2.AuthenticationRepository {
  @override
  set userProfile(_i16.UserProfile? _userProfile) => super.noSuchMethod(
    Invocation.setter(#userProfile, _userProfile),
    returnValueForMissingStub: null,
  );

  @override
  _i15.IAuthenticationDataSource get authenticationDataSource =>
      (super.noSuchMethod(
            Invocation.getter(#authenticationDataSource),
            returnValue: _FakeIAuthenticationDataSource_13(
              this,
              Invocation.getter(#authenticationDataSource),
            ),
            returnValueForMissingStub: _FakeIAuthenticationDataSource_13(
              this,
              Invocation.getter(#authenticationDataSource),
            ),
          )
          as _i15.IAuthenticationDataSource);

  @override
  _i28.Future<_i16.UserProfile> signInWithEmail(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithEmail, [email, password]),
            returnValue: _i28.Future<_i16.UserProfile>.value(
              _FakeUserProfile_14(
                this,
                Invocation.method(#signInWithEmail, [email, password]),
              ),
            ),
            returnValueForMissingStub: _i28.Future<_i16.UserProfile>.value(
              _FakeUserProfile_14(
                this,
                Invocation.method(#signInWithEmail, [email, password]),
              ),
            ),
          )
          as _i28.Future<_i16.UserProfile>);

  @override
  _i28.Future<_i16.UserProfile> signUpWithEmail(
    String? email,
    String? password,
    String? pseudo,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#signUpWithEmail, [email, password, pseudo]),
            returnValue: _i28.Future<_i16.UserProfile>.value(
              _FakeUserProfile_14(
                this,
                Invocation.method(#signUpWithEmail, [email, password, pseudo]),
              ),
            ),
            returnValueForMissingStub: _i28.Future<_i16.UserProfile>.value(
              _FakeUserProfile_14(
                this,
                Invocation.method(#signUpWithEmail, [email, password, pseudo]),
              ),
            ),
          )
          as _i28.Future<_i16.UserProfile>);

  @override
  _i28.Future<_i16.UserProfile?> getUserProfile() =>
      (super.noSuchMethod(
            Invocation.method(#getUserProfile, []),
            returnValue: _i28.Future<_i16.UserProfile?>.value(),
            returnValueForMissingStub: _i28.Future<_i16.UserProfile?>.value(),
          )
          as _i28.Future<_i16.UserProfile?>);

  @override
  _i28.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);
}

/// A class which mocks [CollectionPokemonRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCollectionPokemonRepository extends _i1.Mock
    implements _i4.CollectionPokemonRepository {
  @override
  _i17.ICollectionPokemonDataSource get collectionPokemonDataSource =>
      (super.noSuchMethod(
            Invocation.getter(#collectionPokemonDataSource),
            returnValue: _FakeICollectionPokemonDataSource_15(
              this,
              Invocation.getter(#collectionPokemonDataSource),
            ),
            returnValueForMissingStub: _FakeICollectionPokemonDataSource_15(
              this,
              Invocation.getter(#collectionPokemonDataSource),
            ),
          )
          as _i17.ICollectionPokemonDataSource);

  @override
  List<_i30.PokemonSerieBrief> get seriesBriefs =>
      (super.noSuchMethod(
            Invocation.getter(#seriesBriefs),
            returnValue: <_i30.PokemonSerieBrief>[],
            returnValueForMissingStub: <_i30.PokemonSerieBrief>[],
          )
          as List<_i30.PokemonSerieBrief>);

  @override
  set seriesBriefs(List<_i30.PokemonSerieBrief>? _seriesBriefs) =>
      super.noSuchMethod(
        Invocation.setter(#seriesBriefs, _seriesBriefs),
        returnValueForMissingStub: null,
      );

  @override
  List<_i27.PokemonSerie> get series =>
      (super.noSuchMethod(
            Invocation.getter(#series),
            returnValue: <_i27.PokemonSerie>[],
            returnValueForMissingStub: <_i27.PokemonSerie>[],
          )
          as List<_i27.PokemonSerie>);

  @override
  set series(List<_i27.PokemonSerie>? _series) => super.noSuchMethod(
    Invocation.setter(#series, _series),
    returnValueForMissingStub: null,
  );

  @override
  Map<String, _i18.PokemonSet> get setsMap =>
      (super.noSuchMethod(
            Invocation.getter(#setsMap),
            returnValue: <String, _i18.PokemonSet>{},
            returnValueForMissingStub: <String, _i18.PokemonSet>{},
          )
          as Map<String, _i18.PokemonSet>);

  @override
  set setsMap(Map<String, _i18.PokemonSet>? _setsMap) => super.noSuchMethod(
    Invocation.setter(#setsMap, _setsMap),
    returnValueForMissingStub: null,
  );

  @override
  Map<String, _i19.BasePokemonCard> get cardsMap =>
      (super.noSuchMethod(
            Invocation.getter(#cardsMap),
            returnValue: <String, _i19.BasePokemonCard>{},
            returnValueForMissingStub: <String, _i19.BasePokemonCard>{},
          )
          as Map<String, _i19.BasePokemonCard>);

  @override
  set cardsMap(Map<String, _i19.BasePokemonCard>? _cardsMap) =>
      super.noSuchMethod(
        Invocation.setter(#cardsMap, _cardsMap),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, List<_i20.UserCardCollection>> get userCardsBySetIdMap =>
      (super.noSuchMethod(
            Invocation.getter(#userCardsBySetIdMap),
            returnValue: <String, List<_i20.UserCardCollection>>{},
            returnValueForMissingStub:
                <String, List<_i20.UserCardCollection>>{},
          )
          as Map<String, List<_i20.UserCardCollection>>);

  @override
  set userCardsBySetIdMap(
    Map<String, List<_i20.UserCardCollection>>? _userCardsBySetIdMap,
  ) => super.noSuchMethod(
    Invocation.setter(#userCardsBySetIdMap, _userCardsBySetIdMap),
    returnValueForMissingStub: null,
  );

  @override
  _i28.Future<List<_i30.PokemonSerieBrief>> getSeriesBriefs() =>
      (super.noSuchMethod(
            Invocation.method(#getSeriesBriefs, []),
            returnValue: _i28.Future<List<_i30.PokemonSerieBrief>>.value(
              <_i30.PokemonSerieBrief>[],
            ),
            returnValueForMissingStub:
                _i28.Future<List<_i30.PokemonSerieBrief>>.value(
                  <_i30.PokemonSerieBrief>[],
                ),
          )
          as _i28.Future<List<_i30.PokemonSerieBrief>>);

  @override
  _i28.Future<List<_i27.PokemonSerie>> getSeriesWithSets() =>
      (super.noSuchMethod(
            Invocation.method(#getSeriesWithSets, []),
            returnValue: _i28.Future<List<_i27.PokemonSerie>>.value(
              <_i27.PokemonSerie>[],
            ),
            returnValueForMissingStub:
                _i28.Future<List<_i27.PokemonSerie>>.value(
                  <_i27.PokemonSerie>[],
                ),
          )
          as _i28.Future<List<_i27.PokemonSerie>>);

  @override
  _i28.Future<_i18.PokemonSet> getSetWithCards({required String? setId}) =>
      (super.noSuchMethod(
            Invocation.method(#getSetWithCards, [], {#setId: setId}),
            returnValue: _i28.Future<_i18.PokemonSet>.value(
              _FakePokemonSet_16(
                this,
                Invocation.method(#getSetWithCards, [], {#setId: setId}),
              ),
            ),
            returnValueForMissingStub: _i28.Future<_i18.PokemonSet>.value(
              _FakePokemonSet_16(
                this,
                Invocation.method(#getSetWithCards, [], {#setId: setId}),
              ),
            ),
          )
          as _i28.Future<_i18.PokemonSet>);

  @override
  _i28.Future<_i19.BasePokemonCard> getCard({required String? id}) =>
      (super.noSuchMethod(
            Invocation.method(#getCard, [], {#id: id}),
            returnValue: _i28.Future<_i19.BasePokemonCard>.value(
              _FakeBasePokemonCard_17(
                this,
                Invocation.method(#getCard, [], {#id: id}),
              ),
            ),
            returnValueForMissingStub: _i28.Future<_i19.BasePokemonCard>.value(
              _FakeBasePokemonCard_17(
                this,
                Invocation.method(#getCard, [], {#id: id}),
              ),
            ),
          )
          as _i28.Future<_i19.BasePokemonCard>);

  @override
  _i28.Future<List<_i20.UserCardCollection>> getUserCollection({
    required String? userId,
    String? cardId,
    String? setId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getUserCollection, [], {
              #userId: userId,
              #cardId: cardId,
              #setId: setId,
            }),
            returnValue: _i28.Future<List<_i20.UserCardCollection>>.value(
              <_i20.UserCardCollection>[],
            ),
            returnValueForMissingStub:
                _i28.Future<List<_i20.UserCardCollection>>.value(
                  <_i20.UserCardCollection>[],
                ),
          )
          as _i28.Future<List<_i20.UserCardCollection>>);

  @override
  _i28.Future<_i20.UserCardCollection> addCardToUserCollection({
    required String? id,
    required int? quantity,
    required _i31.VariantValue? variant,
    required String? setId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#addCardToUserCollection, [], {
              #id: id,
              #quantity: quantity,
              #variant: variant,
              #setId: setId,
            }),
            returnValue: _i28.Future<_i20.UserCardCollection>.value(
              _FakeUserCardCollection_18(
                this,
                Invocation.method(#addCardToUserCollection, [], {
                  #id: id,
                  #quantity: quantity,
                  #variant: variant,
                  #setId: setId,
                }),
              ),
            ),
            returnValueForMissingStub:
                _i28.Future<_i20.UserCardCollection>.value(
                  _FakeUserCardCollection_18(
                    this,
                    Invocation.method(#addCardToUserCollection, [], {
                      #id: id,
                      #quantity: quantity,
                      #variant: variant,
                      #setId: setId,
                    }),
                  ),
                ),
          )
          as _i28.Future<_i20.UserCardCollection>);

  @override
  _i28.Future<List<_i18.PokemonSet>> getSetsFromUserCards({
    required List<_i20.UserCardCollection>? userCards,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getSetsFromUserCards, [], {
              #userCards: userCards,
            }),
            returnValue: _i28.Future<List<_i18.PokemonSet>>.value(
              <_i18.PokemonSet>[],
            ),
            returnValueForMissingStub: _i28.Future<List<_i18.PokemonSet>>.value(
              <_i18.PokemonSet>[],
            ),
          )
          as _i28.Future<List<_i18.PokemonSet>>);

  @override
  _i28.Future<List<_i27.PokemonSerie>> getSeriesFromSets({
    required List<_i18.PokemonSet>? sets,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getSeriesFromSets, [], {#sets: sets}),
            returnValue: _i28.Future<List<_i27.PokemonSerie>>.value(
              <_i27.PokemonSerie>[],
            ),
            returnValueForMissingStub:
                _i28.Future<List<_i27.PokemonSerie>>.value(
                  <_i27.PokemonSerie>[],
                ),
          )
          as _i28.Future<List<_i27.PokemonSerie>>);

  @override
  _i28.Future<List<_i19.BasePokemonCard>> getCardsDetailsFromUserCards({
    required List<_i20.UserCardCollection>? userCards,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getCardsDetailsFromUserCards, [], {
              #userCards: userCards,
            }),
            returnValue: _i28.Future<List<_i19.BasePokemonCard>>.value(
              <_i19.BasePokemonCard>[],
            ),
            returnValueForMissingStub:
                _i28.Future<List<_i19.BasePokemonCard>>.value(
                  <_i19.BasePokemonCard>[],
                ),
          )
          as _i28.Future<List<_i19.BasePokemonCard>>);

  @override
  _i28.Future<Map<String, _i19.BasePokemonCard>> getCardByIds({
    required List<String>? ids,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getCardByIds, [], {#ids: ids}),
            returnValue: _i28.Future<Map<String, _i19.BasePokemonCard>>.value(
              <String, _i19.BasePokemonCard>{},
            ),
            returnValueForMissingStub:
                _i28.Future<Map<String, _i19.BasePokemonCard>>.value(
                  <String, _i19.BasePokemonCard>{},
                ),
          )
          as _i28.Future<Map<String, _i19.BasePokemonCard>>);

  @override
  _i28.Future<void> deleteCardFromUserCollection({
    required String? id,
    required int? quantity,
    required _i31.VariantValue? variant,
    required String? setId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#deleteCardFromUserCollection, [], {
              #id: id,
              #quantity: quantity,
              #variant: variant,
              #setId: setId,
            }),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);
}

/// A class which mocks [TradeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTradeRepository extends _i1.Mock implements _i8.TradeRepository {
  @override
  _i21.ITradeDataSource get tradeDataSource =>
      (super.noSuchMethod(
            Invocation.getter(#tradeDataSource),
            returnValue: _FakeITradeDataSource_19(
              this,
              Invocation.getter(#tradeDataSource),
            ),
            returnValueForMissingStub: _FakeITradeDataSource_19(
              this,
              Invocation.getter(#tradeDataSource),
            ),
          )
          as _i21.ITradeDataSource);

  @override
  _i28.Future<List<_i32.UserStats>> getAllUser() =>
      (super.noSuchMethod(
            Invocation.method(#getAllUser, []),
            returnValue: _i28.Future<List<_i32.UserStats>>.value(
              <_i32.UserStats>[],
            ),
            returnValueForMissingStub: _i28.Future<List<_i32.UserStats>>.value(
              <_i32.UserStats>[],
            ),
          )
          as _i28.Future<List<_i32.UserStats>>);

  @override
  _i28.Future<List<_i33.Trade>> getSendTrade() =>
      (super.noSuchMethod(
            Invocation.method(#getSendTrade, []),
            returnValue: _i28.Future<List<_i33.Trade>>.value(<_i33.Trade>[]),
            returnValueForMissingStub: _i28.Future<List<_i33.Trade>>.value(
              <_i33.Trade>[],
            ),
          )
          as _i28.Future<List<_i33.Trade>>);

  @override
  _i28.Future<List<_i33.Trade>> getReceivedTrade() =>
      (super.noSuchMethod(
            Invocation.method(#getReceivedTrade, []),
            returnValue: _i28.Future<List<_i33.Trade>>.value(<_i33.Trade>[]),
            returnValueForMissingStub: _i28.Future<List<_i33.Trade>>.value(
              <_i33.Trade>[],
            ),
          )
          as _i28.Future<List<_i33.Trade>>);

  @override
  _i28.Future<void> askTrade({
    required _i34.TradeRequestData? myTradeRequestData,
    required _i34.TradeRequestData? otherTradeRequestData,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#askTrade, [], {
              #myTradeRequestData: myTradeRequestData,
              #otherTradeRequestData: otherTradeRequestData,
            }),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> acceptTrade({required String? tradeId}) =>
      (super.noSuchMethod(
            Invocation.method(#acceptTrade, [], {#tradeId: tradeId}),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> refuseTrade({required String? tradeId}) =>
      (super.noSuchMethod(
            Invocation.method(#refuseTrade, [], {#tradeId: tradeId}),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);
}

/// A class which mocks [ProfileRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProfileRepository extends _i1.Mock implements _i10.ProfileRepository {
  @override
  _i22.IProfileDataSource get profileDataSource =>
      (super.noSuchMethod(
            Invocation.getter(#profileDataSource),
            returnValue: _FakeIProfileDataSource_20(
              this,
              Invocation.getter(#profileDataSource),
            ),
            returnValueForMissingStub: _FakeIProfileDataSource_20(
              this,
              Invocation.getter(#profileDataSource),
            ),
          )
          as _i22.IProfileDataSource);

  @override
  _i28.Future<_i16.UserProfile?> getProfile({required String? id}) =>
      (super.noSuchMethod(
            Invocation.method(#getProfile, [], {#id: id}),
            returnValue: _i28.Future<_i16.UserProfile?>.value(),
            returnValueForMissingStub: _i28.Future<_i16.UserProfile?>.value(),
          )
          as _i28.Future<_i16.UserProfile?>);

  @override
  _i28.Future<_i23.UserProfileWithStats> getProfileWithStats({
    required String? id,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getProfileWithStats, [], {#id: id}),
            returnValue: _i28.Future<_i23.UserProfileWithStats>.value(
              _FakeUserProfileWithStats_21(
                this,
                Invocation.method(#getProfileWithStats, [], {#id: id}),
              ),
            ),
            returnValueForMissingStub:
                _i28.Future<_i23.UserProfileWithStats>.value(
                  _FakeUserProfileWithStats_21(
                    this,
                    Invocation.method(#getProfileWithStats, [], {#id: id}),
                  ),
                ),
          )
          as _i28.Future<_i23.UserProfileWithStats>);

  @override
  _i28.Future<void> updateProfile({
    required _i16.UserProfile? user,
    required String? password,
    required _i16.UserProfile? currentUser,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateProfile, [], {
              #user: user,
              #password: password,
              #currentUser: currentUser,
            }),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> changePassword({
    required String? currentPassword,
    required String? newPassword,
    required String? email,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#changePassword, [], {
              #currentPassword: currentPassword,
              #newPassword: newPassword,
              #email: email,
            }),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);
}

/// A class which mocks [DiscussionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDiscussionRepository extends _i1.Mock
    implements _i13.DiscussionRepository {
  @override
  _i24.IDiscussionDataSource get discussionDataSource =>
      (super.noSuchMethod(
            Invocation.getter(#discussionDataSource),
            returnValue: _FakeIDiscussionDataSource_22(
              this,
              Invocation.getter(#discussionDataSource),
            ),
            returnValueForMissingStub: _FakeIDiscussionDataSource_22(
              this,
              Invocation.getter(#discussionDataSource),
            ),
          )
          as _i24.IDiscussionDataSource);

  @override
  _i28.Future<_i25.Discussion> getDiscussionByTradeId(String? tradeId) =>
      (super.noSuchMethod(
            Invocation.method(#getDiscussionByTradeId, [tradeId]),
            returnValue: _i28.Future<_i25.Discussion>.value(
              _FakeDiscussion_23(
                this,
                Invocation.method(#getDiscussionByTradeId, [tradeId]),
              ),
            ),
            returnValueForMissingStub: _i28.Future<_i25.Discussion>.value(
              _FakeDiscussion_23(
                this,
                Invocation.method(#getDiscussionByTradeId, [tradeId]),
              ),
            ),
          )
          as _i28.Future<_i25.Discussion>);

  @override
  _i28.Future<_i26.Message> sendMessage(_i26.Message? message) =>
      (super.noSuchMethod(
            Invocation.method(#sendMessage, [message]),
            returnValue: _i28.Future<_i26.Message>.value(
              _FakeMessage_24(this, Invocation.method(#sendMessage, [message])),
            ),
            returnValueForMissingStub: _i28.Future<_i26.Message>.value(
              _FakeMessage_24(this, Invocation.method(#sendMessage, [message])),
            ),
          )
          as _i28.Future<_i26.Message>);

  @override
  _i28.Stream<_i26.Message> subscribeToMessages(String? discussionId) =>
      (super.noSuchMethod(
            Invocation.method(#subscribeToMessages, [discussionId]),
            returnValue: _i28.Stream<_i26.Message>.empty(),
            returnValueForMissingStub: _i28.Stream<_i26.Message>.empty(),
          )
          as _i28.Stream<_i26.Message>);
}

/// A class which mocks [IAuthenticationDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAuthenticationDataSource extends _i1.Mock
    implements _i15.IAuthenticationDataSource {
  @override
  _i28.Future<_i16.UserProfile> signInWithEmail(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithEmail, [email, password]),
            returnValue: _i28.Future<_i16.UserProfile>.value(
              _FakeUserProfile_14(
                this,
                Invocation.method(#signInWithEmail, [email, password]),
              ),
            ),
            returnValueForMissingStub: _i28.Future<_i16.UserProfile>.value(
              _FakeUserProfile_14(
                this,
                Invocation.method(#signInWithEmail, [email, password]),
              ),
            ),
          )
          as _i28.Future<_i16.UserProfile>);

  @override
  _i28.Future<_i16.UserProfile> signUpWithEmail(
    String? email,
    String? password,
    String? pseudo,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#signUpWithEmail, [email, password, pseudo]),
            returnValue: _i28.Future<_i16.UserProfile>.value(
              _FakeUserProfile_14(
                this,
                Invocation.method(#signUpWithEmail, [email, password, pseudo]),
              ),
            ),
            returnValueForMissingStub: _i28.Future<_i16.UserProfile>.value(
              _FakeUserProfile_14(
                this,
                Invocation.method(#signUpWithEmail, [email, password, pseudo]),
              ),
            ),
          )
          as _i28.Future<_i16.UserProfile>);

  @override
  _i28.Future<_i16.UserProfile?> getUserProfile() =>
      (super.noSuchMethod(
            Invocation.method(#getUserProfile, []),
            returnValue: _i28.Future<_i16.UserProfile?>.value(),
            returnValueForMissingStub: _i28.Future<_i16.UserProfile?>.value(),
          )
          as _i28.Future<_i16.UserProfile?>);

  @override
  _i28.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);
}

/// A class which mocks [ICollectionPokemonDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockICollectionPokemonDataSource extends _i1.Mock
    implements _i17.ICollectionPokemonDataSource {
  @override
  _i28.Future<List<_i30.PokemonSerieBrief>> getSeriesBriefs() =>
      (super.noSuchMethod(
            Invocation.method(#getSeriesBriefs, []),
            returnValue: _i28.Future<List<_i30.PokemonSerieBrief>>.value(
              <_i30.PokemonSerieBrief>[],
            ),
            returnValueForMissingStub:
                _i28.Future<List<_i30.PokemonSerieBrief>>.value(
                  <_i30.PokemonSerieBrief>[],
                ),
          )
          as _i28.Future<List<_i30.PokemonSerieBrief>>);

  @override
  _i28.Future<_i27.PokemonSerie> getSerie(String? serieId) =>
      (super.noSuchMethod(
            Invocation.method(#getSerie, [serieId]),
            returnValue: _i28.Future<_i27.PokemonSerie>.value(
              _FakePokemonSerie_25(
                this,
                Invocation.method(#getSerie, [serieId]),
              ),
            ),
            returnValueForMissingStub: _i28.Future<_i27.PokemonSerie>.value(
              _FakePokemonSerie_25(
                this,
                Invocation.method(#getSerie, [serieId]),
              ),
            ),
          )
          as _i28.Future<_i27.PokemonSerie>);

  @override
  _i28.Future<_i18.PokemonSet> getSet(String? setId) =>
      (super.noSuchMethod(
            Invocation.method(#getSet, [setId]),
            returnValue: _i28.Future<_i18.PokemonSet>.value(
              _FakePokemonSet_16(this, Invocation.method(#getSet, [setId])),
            ),
            returnValueForMissingStub: _i28.Future<_i18.PokemonSet>.value(
              _FakePokemonSet_16(this, Invocation.method(#getSet, [setId])),
            ),
          )
          as _i28.Future<_i18.PokemonSet>);

  @override
  _i28.Future<_i19.BasePokemonCard> getCard({required String? id}) =>
      (super.noSuchMethod(
            Invocation.method(#getCard, [], {#id: id}),
            returnValue: _i28.Future<_i19.BasePokemonCard>.value(
              _FakeBasePokemonCard_17(
                this,
                Invocation.method(#getCard, [], {#id: id}),
              ),
            ),
            returnValueForMissingStub: _i28.Future<_i19.BasePokemonCard>.value(
              _FakeBasePokemonCard_17(
                this,
                Invocation.method(#getCard, [], {#id: id}),
              ),
            ),
          )
          as _i28.Future<_i19.BasePokemonCard>);

  @override
  _i28.Future<List<_i20.UserCardCollection>> getUserCollection({
    required String? userId,
    String? cardId,
    String? setId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getUserCollection, [], {
              #userId: userId,
              #cardId: cardId,
              #setId: setId,
            }),
            returnValue: _i28.Future<List<_i20.UserCardCollection>>.value(
              <_i20.UserCardCollection>[],
            ),
            returnValueForMissingStub:
                _i28.Future<List<_i20.UserCardCollection>>.value(
                  <_i20.UserCardCollection>[],
                ),
          )
          as _i28.Future<List<_i20.UserCardCollection>>);

  @override
  _i28.Future<_i20.UserCardCollection> addCardToUserCollection({
    required String? id,
    required int? quantity,
    required _i31.VariantValue? variant,
    required String? setId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#addCardToUserCollection, [], {
              #id: id,
              #quantity: quantity,
              #variant: variant,
              #setId: setId,
            }),
            returnValue: _i28.Future<_i20.UserCardCollection>.value(
              _FakeUserCardCollection_18(
                this,
                Invocation.method(#addCardToUserCollection, [], {
                  #id: id,
                  #quantity: quantity,
                  #variant: variant,
                  #setId: setId,
                }),
              ),
            ),
            returnValueForMissingStub:
                _i28.Future<_i20.UserCardCollection>.value(
                  _FakeUserCardCollection_18(
                    this,
                    Invocation.method(#addCardToUserCollection, [], {
                      #id: id,
                      #quantity: quantity,
                      #variant: variant,
                      #setId: setId,
                    }),
                  ),
                ),
          )
          as _i28.Future<_i20.UserCardCollection>);

  @override
  _i28.Future<void> deleteCardFromUserCollection({
    required String? id,
    required int? quantity,
    required _i31.VariantValue? variant,
    required String? setId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#deleteCardFromUserCollection, [], {
              #id: id,
              #quantity: quantity,
              #variant: variant,
              #setId: setId,
            }),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);
}

/// A class which mocks [ITradeDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockITradeDataSource extends _i1.Mock implements _i21.ITradeDataSource {
  @override
  _i28.Future<List<_i32.UserStats>> getAllUser() =>
      (super.noSuchMethod(
            Invocation.method(#getAllUser, []),
            returnValue: _i28.Future<List<_i32.UserStats>>.value(
              <_i32.UserStats>[],
            ),
            returnValueForMissingStub: _i28.Future<List<_i32.UserStats>>.value(
              <_i32.UserStats>[],
            ),
          )
          as _i28.Future<List<_i32.UserStats>>);

  @override
  _i28.Future<List<_i33.Trade>> getSendTrade() =>
      (super.noSuchMethod(
            Invocation.method(#getSendTrade, []),
            returnValue: _i28.Future<List<_i33.Trade>>.value(<_i33.Trade>[]),
            returnValueForMissingStub: _i28.Future<List<_i33.Trade>>.value(
              <_i33.Trade>[],
            ),
          )
          as _i28.Future<List<_i33.Trade>>);

  @override
  _i28.Future<List<_i33.Trade>> getReceivedTrade() =>
      (super.noSuchMethod(
            Invocation.method(#getReceivedTrade, []),
            returnValue: _i28.Future<List<_i33.Trade>>.value(<_i33.Trade>[]),
            returnValueForMissingStub: _i28.Future<List<_i33.Trade>>.value(
              <_i33.Trade>[],
            ),
          )
          as _i28.Future<List<_i33.Trade>>);

  @override
  _i28.Future<void> askTrade({
    required _i34.TradeRequestData? myTradeRequestData,
    required _i34.TradeRequestData? otherTradeRequestData,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#askTrade, [], {
              #myTradeRequestData: myTradeRequestData,
              #otherTradeRequestData: otherTradeRequestData,
            }),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> acceptTrade({required String? tradeId}) =>
      (super.noSuchMethod(
            Invocation.method(#acceptTrade, [], {#tradeId: tradeId}),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> refuseTrade({required String? tradeId}) =>
      (super.noSuchMethod(
            Invocation.method(#refuseTrade, [], {#tradeId: tradeId}),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);
}

/// A class which mocks [IProfileDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIProfileDataSource extends _i1.Mock
    implements _i22.IProfileDataSource {
  @override
  _i28.Future<_i16.UserProfile> getProfile({required String? id}) =>
      (super.noSuchMethod(
            Invocation.method(#getProfile, [], {#id: id}),
            returnValue: _i28.Future<_i16.UserProfile>.value(
              _FakeUserProfile_14(
                this,
                Invocation.method(#getProfile, [], {#id: id}),
              ),
            ),
            returnValueForMissingStub: _i28.Future<_i16.UserProfile>.value(
              _FakeUserProfile_14(
                this,
                Invocation.method(#getProfile, [], {#id: id}),
              ),
            ),
          )
          as _i28.Future<_i16.UserProfile>);

  @override
  _i28.Future<_i23.UserProfileWithStats> getProfileWithStats({
    required String? id,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getProfileWithStats, [], {#id: id}),
            returnValue: _i28.Future<_i23.UserProfileWithStats>.value(
              _FakeUserProfileWithStats_21(
                this,
                Invocation.method(#getProfileWithStats, [], {#id: id}),
              ),
            ),
            returnValueForMissingStub:
                _i28.Future<_i23.UserProfileWithStats>.value(
                  _FakeUserProfileWithStats_21(
                    this,
                    Invocation.method(#getProfileWithStats, [], {#id: id}),
                  ),
                ),
          )
          as _i28.Future<_i23.UserProfileWithStats>);

  @override
  _i28.Future<void> updateProfile({
    required _i16.UserProfile? user,
    required _i16.UserProfile? currentUser,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateProfile, [], {
              #user: user,
              #currentUser: currentUser,
              #password: password,
            }),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> changePassword({
    required String? currentPassword,
    required String? newPassword,
    required String? email,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#changePassword, [], {
              #currentPassword: currentPassword,
              #newPassword: newPassword,
              #email: email,
            }),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);
}

/// A class which mocks [IDiscussionDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIDiscussionDataSource extends _i1.Mock
    implements _i24.IDiscussionDataSource {
  @override
  _i28.Future<_i25.Discussion> getDiscussionByTradeId(String? tradeId) =>
      (super.noSuchMethod(
            Invocation.method(#getDiscussionByTradeId, [tradeId]),
            returnValue: _i28.Future<_i25.Discussion>.value(
              _FakeDiscussion_23(
                this,
                Invocation.method(#getDiscussionByTradeId, [tradeId]),
              ),
            ),
            returnValueForMissingStub: _i28.Future<_i25.Discussion>.value(
              _FakeDiscussion_23(
                this,
                Invocation.method(#getDiscussionByTradeId, [tradeId]),
              ),
            ),
          )
          as _i28.Future<_i25.Discussion>);

  @override
  _i28.Future<_i26.Message> sendMessage(_i26.Message? message) =>
      (super.noSuchMethod(
            Invocation.method(#sendMessage, [message]),
            returnValue: _i28.Future<_i26.Message>.value(
              _FakeMessage_24(this, Invocation.method(#sendMessage, [message])),
            ),
            returnValueForMissingStub: _i28.Future<_i26.Message>.value(
              _FakeMessage_24(this, Invocation.method(#sendMessage, [message])),
            ),
          )
          as _i28.Future<_i26.Message>);

  @override
  _i28.Stream<_i26.Message> subscribeToMessages(String? discussionId) =>
      (super.noSuchMethod(
            Invocation.method(#subscribeToMessages, [discussionId]),
            returnValue: _i28.Stream<_i26.Message>.empty(),
            returnValueForMissingStub: _i28.Stream<_i26.Message>.empty(),
          )
          as _i28.Stream<_i26.Message>);
}
